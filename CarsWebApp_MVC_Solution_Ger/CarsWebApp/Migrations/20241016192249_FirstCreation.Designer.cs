// <auto-generated />
using System;
using CarsWebApp.DbAcces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarsWebApp.Migrations
{
    [DbContext(typeof(MyCarsDbContext))]
    [Migration("20241016192249_FirstCreation")]
    partial class FirstCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyDomain.Car", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("CarColorId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarColorId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Chevrolet",
                            CarColorId = 5,
                            Price = 38000,
                            Type = "Camaro",
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Hyundai",
                            CarColorId = 3,
                            Price = 19000,
                            Type = "Elantra",
                            Year = 2022
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Volkswagen",
                            CarColorId = 3,
                            Price = 21500,
                            Type = "Passat",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Chevrolet",
                            CarColorId = 4,
                            Price = 21000,
                            Type = "Equinox",
                            Year = 2022
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Volkswagen",
                            CarColorId = 2,
                            Price = 19500,
                            Type = "Jetta",
                            Year = 2022
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Chevrolet",
                            CarColorId = 1,
                            Price = 20000,
                            Type = "Malibu",
                            Year = 2022
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Hyundai",
                            CarColorId = 4,
                            Price = 24000,
                            Type = "Santa Fe",
                            Year = 2022
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Volkswagen",
                            CarColorId = 5,
                            Price = 21600,
                            Type = "Tiguan",
                            Year = 2022
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Chevrolet",
                            CarColorId = 3,
                            Price = 20000,
                            Type = "Trailblazer",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("MyDomain.CarColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("CarColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Black"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Gold"
                        },
                        new
                        {
                            Id = 5,
                            Color = "Silver"
                        });
                });

            modelBuilder.Entity("MyDomain.CarHasOption", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CarOptionId")
                        .HasColumnType("int");

                    b.HasKey("CarId", "CarOptionId");

                    b.HasIndex("CarOptionId");

                    b.ToTable("CarHasOptions");
                });

            modelBuilder.Entity("MyDomain.CarOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CarOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Option = "Leather Seats",
                            Price = 1500
                        },
                        new
                        {
                            Id = 2,
                            Option = "Sunroof",
                            Price = 1200
                        },
                        new
                        {
                            Id = 3,
                            Option = "Navigation System",
                            Price = 1000
                        },
                        new
                        {
                            Id = 4,
                            Option = "Heated Seats",
                            Price = 500
                        },
                        new
                        {
                            Id = 5,
                            Option = "Bluetooth",
                            Price = 300
                        },
                        new
                        {
                            Id = 6,
                            Option = "Backup Camera",
                            Price = 200
                        },
                        new
                        {
                            Id = 7,
                            Option = "Remote Start",
                            Price = 400
                        },
                        new
                        {
                            Id = 8,
                            Option = "Blind Spot Monitoring",
                            Price = 600
                        },
                        new
                        {
                            Id = 9,
                            Option = "Parking Sensors",
                            Price = 400
                        },
                        new
                        {
                            Id = 10,
                            Option = "Lane Departure Warning",
                            Price = 1500
                        },
                        new
                        {
                            Id = 11,
                            Option = "Adaptive Cruise Control",
                            Price = 1500
                        },
                        new
                        {
                            Id = 12,
                            Option = "Apple CarPlay",
                            Price = 300
                        },
                        new
                        {
                            Id = 13,
                            Option = "Android Auto",
                            Price = 300
                        },
                        new
                        {
                            Id = 14,
                            Option = "Wi-Fi Hotspot",
                            Price = 200
                        },
                        new
                        {
                            Id = 15,
                            Option = "Keyless Entry",
                            Price = 300
                        },
                        new
                        {
                            Id = 16,
                            Option = "Power Liftgate",
                            Price = 500
                        },
                        new
                        {
                            Id = 17,
                            Option = "Satellite Radio",
                            Price = 300
                        },
                        new
                        {
                            Id = 18,
                            Option = "Automatic Parking",
                            Price = 1000
                        },
                        new
                        {
                            Id = 19,
                            Option = "Surround-View Camera",
                            Price = 800
                        },
                        new
                        {
                            Id = 20,
                            Option = "Head-Up Display",
                            Price = 1000
                        });
                });

            modelBuilder.Entity("MyDomain.Car", b =>
                {
                    b.HasOne("MyDomain.CarColor", "CarColor")
                        .WithMany("Cars")
                        .HasForeignKey("CarColorId");

                    b.Navigation("CarColor");
                });

            modelBuilder.Entity("MyDomain.CarHasOption", b =>
                {
                    b.HasOne("MyDomain.Car", "Car")
                        .WithMany("CarHasOptions")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDomain.CarOption", "CarOption")
                        .WithMany("CarHasOptions")
                        .HasForeignKey("CarOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("CarOption");
                });

            modelBuilder.Entity("MyDomain.Car", b =>
                {
                    b.Navigation("CarHasOptions");
                });

            modelBuilder.Entity("MyDomain.CarColor", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MyDomain.CarOption", b =>
                {
                    b.Navigation("CarHasOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
